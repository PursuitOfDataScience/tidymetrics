% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cross-periods.R
\name{cross_by_periods}
\alias{cross_by_periods}
\alias{cross_by_periods.tbl_lazy}
\alias{cross_by_periods.tbl_df}
\alias{cross_by_periods_cumulative}
\title{Expand a table so that it can be aggregated by a period}
\usage{
cross_by_periods(tbl, periods, windows, intervals, ...)

\method{cross_by_periods}{tbl_lazy}(
  tbl,
  periods = c("week", "month", "quarter"),
  windows = c(),
  intervals = FALSE,
  remote_date_periods = NULL,
  ...
)

\method{cross_by_periods}{tbl_df}(
  tbl,
  periods = c("week", "month", "quarter"),
  windows = c(),
  intervals = FALSE,
  ...
)

cross_by_periods_cumulative(tbl, remote_date_periods = NULL)
}
\arguments{
\item{tbl}{A tbl, either local or remote.}

\item{periods}{A vector of calendar periods. This supports "day", "week", "month", "quarter",
and "year".}

\item{windows}{A vector of windows, each representing a # of days}

\item{intervals}{Whether a preselected set of intervals starting from today, such as
"Last Week", "Last 2 Weeks", or "All Time" should be included.}

\item{...}{Extra arguments, not used}

\item{remote_date_periods}{For crossing remote tables, an existing remote table
linking dates to their respective periods. By default, use a global accessor function.}
}
\value{
A tbl (either local or remote, depending on the input), where TODO. It is grouped by
any grouping columns that were in the input, as well as by the new \code{date} and
\code{period} columns.
}
\description{
Cross by any set of calendar periods (like day or week), rolling windows,
or recent intervals (like "4 Weeks", or "8 Weeks"). This means that each
row in the input will appear potentially multiple times, each time associated
with a different period and date.
}
\examples{

library(dplyr)

flights <- nycflights13::flights \%>\%
  mutate(date = as.Date(ISOdate(year, month, day)))

# find flight delays by week, month, and quarter
flight_summary <- flights \%>\%
  cross_by_periods() \%>\%
  summarize(
    nb_flights = n(),
    avg_arr_delay = mean(arr_delay, na.rm = TRUE)
  )

library(ggplot2)

ggplot(flight_summary, aes(date, avg_arr_delay, color = period)) +
  geom_line()
}
